class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        rowset = [set() for _ in range(9)]
        columnset = [set() for _ in range(9)]
        box = [[set() for _ in range(3)] for _ in range(3)]
        nums = map(str,range(1,10))
        
        for i,row in enumerate(board):
            for j,c in enumerate(row):
                if c != '.':
                    rowset[i].add(c)
                    columnset[j].add(c)
                    box[i/3][j/3].add(c)
                    
        def solver(r,c):
            if r==8 and c == 8:
                for num in nums:
                    if num in rowset[r] or num in columnset[c] or num in box[r/3][c/3]:
                        continue
                    else:
                        board[r][c] = num
                return True
            
            if board[r][c] != '.':
                if r == 8:
                    return solver(0,c+1)
                else:
                    return solver(r+1,c)
            else:
                for num in nums:
                    if num in rowset[r] or num in columnset[c] or num in box[r/3][c/3]:
                        continue
                    else:
                        rowset[r].add(num)
                        columnset[c].add(num)
                        box[r/3][c/3].add(num)
                        if r == 8:
                            f = solver(0,c+1)
                        else:
                            f = solver(r+1,c)
                        
                        if not f:
                            rowset[r].remove(num)
                            columnset[c].remove(num)
                            box[r/3][c/3].remove(num)
                        else:
                            board[r][c] = num
                            return True
                            
        solver(0,0)
